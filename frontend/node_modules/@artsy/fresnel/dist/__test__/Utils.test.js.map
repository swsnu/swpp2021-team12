{"version":3,"sources":["../../src/__test__/Utils.test.ts"],"names":["describe","breakpointsWithStrings","small","medium","large","breakpointsWithIntegers","breakpointsWithMixedValues","it","results","expect","toEqual"],"mappings":";;AAAA;;AAEAA,QAAQ,CAAC,iBAAD,EAAoB,YAAM;AAChCA,EAAAA,QAAQ,CAAC,qEAAD,EAAwE,YAAM;AACpF,QAAMC,sBAAsB,GAAG;AAC7B,qBAAe,GADc;AAE7BC,MAAAA,KAAK,EAAE,KAFsB;AAG7BC,MAAAA,MAAM,EAAE,MAHqB;AAI7BC,MAAAA,KAAK,EAAE;AAJsB,KAA/B;AAOA,QAAMC,uBAAuB,GAAG;AAC9B,qBAAe,CADe;AAE9BH,MAAAA,KAAK,EAAE,GAFuB;AAG9BC,MAAAA,MAAM,EAAE,IAHsB;AAI9BC,MAAAA,KAAK,EAAE;AAJuB,KAAhC;AAOA,QAAME,0BAA0B,GAAG;AACjC,qBAAe,CADkB;AAEjCJ,MAAAA,KAAK,EAAE,GAF0B;AAGjCC,MAAAA,MAAM,EAAE,IAHyB;AAIjCC,MAAAA,KAAK,EAAE;AAJ0B,KAAnC;AAOAG,IAAAA,EAAE,CAAC,qDAAD,EAAwD,YAAM;AAC9D,UAAMC,OAAO,GAAG,sCAA0BP,sBAA1B,CAAhB;AAEAQ,MAAAA,MAAM,CAACD,OAAD,CAAN,CAAgBE,OAAhB,CAAwBL,uBAAxB;AACD,KAJC,CAAF;AAMAE,IAAAA,EAAE,CAAC,wDAAD,EAA2D,YAAM;AACjE,UAAMC,OAAO,GAAG,sCAA0BH,uBAA1B,CAAhB;AAEAI,MAAAA,MAAM,CAACD,OAAD,CAAN,CAAgBE,OAAhB,CAAwBL,uBAAxB;AACD,KAJC,CAAF;AAMAE,IAAAA,EAAE,CAAC,2CAAD,EAA8C,YAAM;AACpD,UAAMC,OAAO,GAAG,sCAA0BF,0BAA1B,CAAhB;AAEAG,MAAAA,MAAM,CAACD,OAAD,CAAN,CAAgBE,OAAhB,CAAwBL,uBAAxB;AACD,KAJC,CAAF;AAKD,GAvCO,CAAR;AAwCD,CAzCO,CAAR","sourcesContent":["import { castBreakpointsToIntegers } from \"../Utils\"\n\ndescribe(\"utils functions\", () => {\n  describe(\"casting breakpoints gave as either string or integers into integers\", () => {\n    const breakpointsWithStrings = {\n      \"extra-small\": \"0\",\n      small: \"768\",\n      medium: \"1024\",\n      large: \"1120\",\n    }\n\n    const breakpointsWithIntegers = {\n      \"extra-small\": 0,\n      small: 768,\n      medium: 1024,\n      large: 1120,\n    }\n\n    const breakpointsWithMixedValues = {\n      \"extra-small\": 0,\n      small: 768,\n      medium: 1024,\n      large: 1120,\n    }\n\n    it(\"should return value as integers if given as strings\", () => {\n      const results = castBreakpointsToIntegers(breakpointsWithStrings)\n\n      expect(results).toEqual(breakpointsWithIntegers)\n    })\n\n    it(\"should not touch the value if they are already numbers\", () => {\n      const results = castBreakpointsToIntegers(breakpointsWithIntegers)\n\n      expect(results).toEqual(breakpointsWithIntegers)\n    })\n\n    it(\"should work the same with a mix of values\", () => {\n      const results = castBreakpointsToIntegers(breakpointsWithMixedValues)\n\n      expect(results).toEqual(breakpointsWithIntegers)\n    })\n  })\n})\n"],"file":"Utils.test.js"}