"use strict";

// Extracted from https://github.com/facebook/react/blob/7bdf93b17a35a5d8fcf0ceae0bf48ed5e6b16688/src/renderers/shared/fiber/ReactFiberTreeReflection.js#L104-L228
function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;

  if (!alternate) {
    return fiber;
  } // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.


  var a = fiber;
  var b = alternate;

  while (true) {
    // eslint-disable-line
    var parentA = a["return"];
    var parentB = parentA ? parentA.alternate : null;

    if (!parentA || !parentB) {
      // We're at the root.
      break;
    } // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.


    if (parentA.child === parentB.child) {
      var child = parentA.child;

      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          return fiber;
        }

        if (child === b) {
          // We've determined that B is the current branch.
          return alternate;
        }

        child = child.sibling;
      } // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.


      throw new Error('Unable to find node on an unmounted component.');
    }

    if (a["return"] !== b["return"]) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;

      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }

        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }

        _child = _child.sibling;
      }

      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;

        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');
        }
      }
    }
  }

  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  } // Otherwise B has to be current branch.


  return alternate;
}

module.exports = findCurrentFiberUsingSlowPath;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aC5qcyJdLCJuYW1lcyI6WyJmaW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aCIsImZpYmVyIiwiYWx0ZXJuYXRlIiwiYSIsImIiLCJwYXJlbnRBIiwicGFyZW50QiIsImNoaWxkIiwic2libGluZyIsIkVycm9yIiwiZGlkRmluZENoaWxkIiwic3RhdGVOb2RlIiwiY3VycmVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxTQUFTQSw2QkFBVCxDQUF1Q0MsS0FBdkMsRUFBOEM7QUFBQSxNQUNwQ0MsU0FEb0MsR0FDdEJELEtBRHNCLENBQ3BDQyxTQURvQzs7QUFFNUMsTUFBSSxDQUFDQSxTQUFMLEVBQWdCO0FBQ2QsV0FBT0QsS0FBUDtBQUNELEdBSjJDLENBSzVDO0FBQ0E7QUFDQTs7O0FBQ0EsTUFBSUUsQ0FBQyxHQUFHRixLQUFSO0FBQ0EsTUFBSUcsQ0FBQyxHQUFHRixTQUFSOztBQUNBLFNBQU8sSUFBUCxFQUFhO0FBQUU7QUFDYixRQUFNRyxPQUFPLEdBQUdGLENBQUMsVUFBakI7QUFDQSxRQUFNRyxPQUFPLEdBQUdELE9BQU8sR0FBR0EsT0FBTyxDQUFDSCxTQUFYLEdBQXVCLElBQTlDOztBQUNBLFFBQUksQ0FBQ0csT0FBRCxJQUFZLENBQUNDLE9BQWpCLEVBQTBCO0FBQ3hCO0FBQ0E7QUFDRCxLQU5VLENBUVg7QUFDQTtBQUNBOzs7QUFDQSxRQUFJRCxPQUFPLENBQUNFLEtBQVIsS0FBa0JELE9BQU8sQ0FBQ0MsS0FBOUIsRUFBcUM7QUFBQSxVQUM3QkEsS0FENkIsR0FDbkJGLE9BRG1CLENBQzdCRSxLQUQ2Qjs7QUFFbkMsYUFBT0EsS0FBUCxFQUFjO0FBQ1osWUFBSUEsS0FBSyxLQUFLSixDQUFkLEVBQWlCO0FBQ2Y7QUFDQSxpQkFBT0YsS0FBUDtBQUNEOztBQUNELFlBQUlNLEtBQUssS0FBS0gsQ0FBZCxFQUFpQjtBQUNmO0FBQ0EsaUJBQU9GLFNBQVA7QUFDRDs7QUFDREssUUFBQUEsS0FBSyxHQUFHQSxLQUFLLENBQUNDLE9BQWQ7QUFDRCxPQVprQyxDQWFuQztBQUNBOzs7QUFDQSxZQUFNLElBQUlDLEtBQUosQ0FBVSxnREFBVixDQUFOO0FBQ0Q7O0FBRUQsUUFBSU4sQ0FBQyxVQUFELEtBQWFDLENBQUMsVUFBbEIsRUFBMkI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQUQsTUFBQUEsQ0FBQyxHQUFHRSxPQUFKO0FBQ0FELE1BQUFBLENBQUMsR0FBR0UsT0FBSjtBQUNELEtBUEQsTUFPTztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFJSSxZQUFZLEdBQUcsS0FBbkI7QUFOSyxVQU9DSCxNQVBELEdBT1dGLE9BUFgsQ0FPQ0UsS0FQRDs7QUFRTCxhQUFPQSxNQUFQLEVBQWM7QUFDWixZQUFJQSxNQUFLLEtBQUtKLENBQWQsRUFBaUI7QUFDZk8sVUFBQUEsWUFBWSxHQUFHLElBQWY7QUFDQVAsVUFBQUEsQ0FBQyxHQUFHRSxPQUFKO0FBQ0FELFVBQUFBLENBQUMsR0FBR0UsT0FBSjtBQUNBO0FBQ0Q7O0FBQ0QsWUFBSUMsTUFBSyxLQUFLSCxDQUFkLEVBQWlCO0FBQ2ZNLFVBQUFBLFlBQVksR0FBRyxJQUFmO0FBQ0FOLFVBQUFBLENBQUMsR0FBR0MsT0FBSjtBQUNBRixVQUFBQSxDQUFDLEdBQUdHLE9BQUo7QUFDQTtBQUNEOztBQUNEQyxRQUFBQSxNQUFLLEdBQUdBLE1BQUssQ0FBQ0MsT0FBZDtBQUNEOztBQUNELFVBQUksQ0FBQ0UsWUFBTCxFQUFtQjtBQUNqQjtBQUNHSCxRQUFBQSxNQUZjLEdBRUpELE9BRkksQ0FFZEMsS0FGYzs7QUFHakIsZUFBT0EsTUFBUCxFQUFjO0FBQ1osY0FBSUEsTUFBSyxLQUFLSixDQUFkLEVBQWlCO0FBQ2ZPLFlBQUFBLFlBQVksR0FBRyxJQUFmO0FBQ0FQLFlBQUFBLENBQUMsR0FBR0csT0FBSjtBQUNBRixZQUFBQSxDQUFDLEdBQUdDLE9BQUo7QUFDQTtBQUNEOztBQUNELGNBQUlFLE1BQUssS0FBS0gsQ0FBZCxFQUFpQjtBQUNmTSxZQUFBQSxZQUFZLEdBQUcsSUFBZjtBQUNBTixZQUFBQSxDQUFDLEdBQUdFLE9BQUo7QUFDQUgsWUFBQUEsQ0FBQyxHQUFHRSxPQUFKO0FBQ0E7QUFDRDs7QUFDREUsVUFBQUEsTUFBSyxHQUFHQSxNQUFLLENBQUNDLE9BQWQ7QUFDRDs7QUFDRCxZQUFJLENBQUNFLFlBQUwsRUFBbUI7QUFDakIsZ0JBQU0sSUFBSUQsS0FBSixDQUFVLG9FQUNaLCtEQURFLENBQU47QUFFRDtBQUNGO0FBQ0Y7QUFDRjs7QUFDRCxNQUFJTixDQUFDLENBQUNRLFNBQUYsQ0FBWUMsT0FBWixLQUF3QlQsQ0FBNUIsRUFBK0I7QUFDN0I7QUFDQSxXQUFPRixLQUFQO0FBQ0QsR0FqRzJDLENBa0c1Qzs7O0FBQ0EsU0FBT0MsU0FBUDtBQUNEOztBQUVEVyxNQUFNLENBQUNDLE9BQVAsR0FBaUJkLDZCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIEV4dHJhY3RlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzdiZGY5M2IxN2EzNWE1ZDhmY2YwY2VhZTBiZjQ4ZWQ1ZTZiMTY2ODgvc3JjL3JlbmRlcmVycy9zaGFyZWQvZmliZXIvUmVhY3RGaWJlclRyZWVSZWZsZWN0aW9uLmpzI0wxMDQtTDIyOFxyXG5mdW5jdGlvbiBmaW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aChmaWJlcikge1xyXG4gIGNvbnN0IHsgYWx0ZXJuYXRlIH0gPSBmaWJlcjtcclxuICBpZiAoIWFsdGVybmF0ZSkge1xyXG4gICAgcmV0dXJuIGZpYmVyO1xyXG4gIH1cclxuICAvLyBJZiB3ZSBoYXZlIHR3byBwb3NzaWJsZSBicmFuY2hlcywgd2UnbGwgd2FsayBiYWNrd2FyZHMgdXAgdG8gdGhlIHJvb3RcclxuICAvLyB0byBzZWUgd2hhdCBwYXRoIHRoZSByb290IHBvaW50cyB0by4gT24gdGhlIHdheSB3ZSBtYXkgaGl0IG9uZSBvZiB0aGVcclxuICAvLyBzcGVjaWFsIGNhc2VzIGFuZCB3ZSdsbCBkZWFsIHdpdGggdGhlbS5cclxuICBsZXQgYSA9IGZpYmVyO1xyXG4gIGxldCBiID0gYWx0ZXJuYXRlO1xyXG4gIHdoaWxlICh0cnVlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcclxuICAgIGNvbnN0IHBhcmVudEEgPSBhLnJldHVybjtcclxuICAgIGNvbnN0IHBhcmVudEIgPSBwYXJlbnRBID8gcGFyZW50QS5hbHRlcm5hdGUgOiBudWxsO1xyXG4gICAgaWYgKCFwYXJlbnRBIHx8ICFwYXJlbnRCKSB7XHJcbiAgICAgIC8vIFdlJ3JlIGF0IHRoZSByb290LlxyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiBib3RoIGNvcGllcyBvZiB0aGUgcGFyZW50IGZpYmVyIHBvaW50IHRvIHRoZSBzYW1lIGNoaWxkLCB3ZSBjYW5cclxuICAgIC8vIGFzc3VtZSB0aGF0IHRoZSBjaGlsZCBpcyBjdXJyZW50LiBUaGlzIGhhcHBlbnMgd2hlbiB3ZSBiYWlsb3V0IG9uIGxvd1xyXG4gICAgLy8gcHJpb3JpdHk6IHRoZSBiYWlsZWQgb3V0IGZpYmVyJ3MgY2hpbGQgcmV1c2VzIHRoZSBjdXJyZW50IGNoaWxkLlxyXG4gICAgaWYgKHBhcmVudEEuY2hpbGQgPT09IHBhcmVudEIuY2hpbGQpIHtcclxuICAgICAgbGV0IHsgY2hpbGQgfSA9IHBhcmVudEE7XHJcbiAgICAgIHdoaWxlIChjaGlsZCkge1xyXG4gICAgICAgIGlmIChjaGlsZCA9PT0gYSkge1xyXG4gICAgICAgICAgLy8gV2UndmUgZGV0ZXJtaW5lZCB0aGF0IEEgaXMgdGhlIGN1cnJlbnQgYnJhbmNoLlxyXG4gICAgICAgICAgcmV0dXJuIGZpYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2hpbGQgPT09IGIpIHtcclxuICAgICAgICAgIC8vIFdlJ3ZlIGRldGVybWluZWQgdGhhdCBCIGlzIHRoZSBjdXJyZW50IGJyYW5jaC5cclxuICAgICAgICAgIHJldHVybiBhbHRlcm5hdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNoaWxkID0gY2hpbGQuc2libGluZztcclxuICAgICAgfVxyXG4gICAgICAvLyBXZSBzaG91bGQgbmV2ZXIgaGF2ZSBhbiBhbHRlcm5hdGUgZm9yIGFueSBtb3VudGluZyBub2RlLiBTbyB0aGUgb25seVxyXG4gICAgICAvLyB3YXkgdGhpcyBjb3VsZCBwb3NzaWJseSBoYXBwZW4gaXMgaWYgdGhpcyB3YXMgdW5tb3VudGVkLCBpZiBhdCBhbGwuXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgbm9kZSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LicpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChhLnJldHVybiAhPT0gYi5yZXR1cm4pIHtcclxuICAgICAgLy8gVGhlIHJldHVybiBwb2ludGVyIG9mIEEgYW5kIHRoZSByZXR1cm4gcG9pbnRlciBvZiBCIHBvaW50IHRvIGRpZmZlcmVudFxyXG4gICAgICAvLyBmaWJlcnMuIFdlIGFzc3VtZSB0aGF0IHJldHVybiBwb2ludGVycyBuZXZlciBjcmlzcy1jcm9zcywgc28gQSBtdXN0XHJcbiAgICAgIC8vIGJlbG9uZyB0byB0aGUgY2hpbGQgc2V0IG9mIEEucmV0dXJuLCBhbmQgQiBtdXN0IGJlbG9uZyB0byB0aGUgY2hpbGRcclxuICAgICAgLy8gc2V0IG9mIEIucmV0dXJuLlxyXG4gICAgICBhID0gcGFyZW50QTtcclxuICAgICAgYiA9IHBhcmVudEI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBUaGUgcmV0dXJuIHBvaW50ZXJzIHBvaW50IHRvIHRoZSBzYW1lIGZpYmVyLiBXZSdsbCBoYXZlIHRvIHVzZSB0aGVcclxuICAgICAgLy8gZGVmYXVsdCwgc2xvdyBwYXRoOiBzY2FuIHRoZSBjaGlsZCBzZXRzIG9mIGVhY2ggcGFyZW50IGFsdGVybmF0ZSB0byBzZWVcclxuICAgICAgLy8gd2hpY2ggY2hpbGQgYmVsb25ncyB0byB3aGljaCBzZXQuXHJcbiAgICAgIC8vXHJcbiAgICAgIC8vIFNlYXJjaCBwYXJlbnQgQSdzIGNoaWxkIHNldFxyXG4gICAgICBsZXQgZGlkRmluZENoaWxkID0gZmFsc2U7XHJcbiAgICAgIGxldCB7IGNoaWxkIH0gPSBwYXJlbnRBO1xyXG4gICAgICB3aGlsZSAoY2hpbGQpIHtcclxuICAgICAgICBpZiAoY2hpbGQgPT09IGEpIHtcclxuICAgICAgICAgIGRpZEZpbmRDaGlsZCA9IHRydWU7XHJcbiAgICAgICAgICBhID0gcGFyZW50QTtcclxuICAgICAgICAgIGIgPSBwYXJlbnRCO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjaGlsZCA9PT0gYikge1xyXG4gICAgICAgICAgZGlkRmluZENoaWxkID0gdHJ1ZTtcclxuICAgICAgICAgIGIgPSBwYXJlbnRBO1xyXG4gICAgICAgICAgYSA9IHBhcmVudEI7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2hpbGQgPSBjaGlsZC5zaWJsaW5nO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICghZGlkRmluZENoaWxkKSB7XHJcbiAgICAgICAgLy8gU2VhcmNoIHBhcmVudCBCJ3MgY2hpbGQgc2V0XHJcbiAgICAgICAgKHsgY2hpbGQgfSA9IHBhcmVudEIpO1xyXG4gICAgICAgIHdoaWxlIChjaGlsZCkge1xyXG4gICAgICAgICAgaWYgKGNoaWxkID09PSBhKSB7XHJcbiAgICAgICAgICAgIGRpZEZpbmRDaGlsZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGEgPSBwYXJlbnRCO1xyXG4gICAgICAgICAgICBiID0gcGFyZW50QTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoY2hpbGQgPT09IGIpIHtcclxuICAgICAgICAgICAgZGlkRmluZENoaWxkID0gdHJ1ZTtcclxuICAgICAgICAgICAgYiA9IHBhcmVudEI7XHJcbiAgICAgICAgICAgIGEgPSBwYXJlbnRBO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNoaWxkID0gY2hpbGQuc2libGluZztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFkaWRGaW5kQ2hpbGQpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2hpbGQgd2FzIG5vdCBmb3VuZCBpbiBlaXRoZXIgcGFyZW50IHNldC4gVGhpcyBpbmRpY2F0ZXMgYSBidWcgJ1xyXG4gICAgICAgICAgICArICdpbiBSZWFjdCByZWxhdGVkIHRvIHRoZSByZXR1cm4gcG9pbnRlci4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmIChhLnN0YXRlTm9kZS5jdXJyZW50ID09PSBhKSB7XHJcbiAgICAvLyBXZSd2ZSBkZXRlcm1pbmVkIHRoYXQgQSBpcyB0aGUgY3VycmVudCBicmFuY2guXHJcbiAgICByZXR1cm4gZmliZXI7XHJcbiAgfVxyXG4gIC8vIE90aGVyd2lzZSBCIGhhcyB0byBiZSBjdXJyZW50IGJyYW5jaC5cclxuICByZXR1cm4gYWx0ZXJuYXRlO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoO1xyXG4iXX0=
//# sourceMappingURL=findCurrentFiberUsingSlowPath.js.map