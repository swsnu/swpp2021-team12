{"ast":null,"code":"import { handleActions } from 'redux-actions';\nimport { takeLatest } from 'redux-saga/effects';\nimport * as actionTypes from '../../actions/actionTypes';\nimport createRequestSaga from '../../../components/auth/createRequestSaga';\nimport * as authAPI from '../../../lib/api/auth';\nconst signinSaga = createRequestSaga(actionTypes.SIGNIN, authAPI.signin);\nconst signupSaga = createRequestSaga(actionTypes.SIGNUP, authAPI.signup);\nconst signoutSaga = createRequestSaga(actionTypes.SIGNOUT, authAPI.signout);\nexport function* authSaga() {\n  yield takeLatest(actionTypes.SIGNIN, signinSaga);\n  yield takeLatest(actionTypes.SIGNUP, signupSaga);\n  yield takeLatest(actionTypes.SIGNOUT, signoutSaga);\n}\nconst initialState = {\n  auth: null,\n  authError: null\n};\nconst auth = handleActions({\n  [actionTypes.SIGNIN_SUCCESS]: (state, {\n    payload: user\n  }) => ({ ...state,\n    authError: null,\n    auth: {\n      type: 'SIGNIN',\n      user\n    }\n  }),\n  [actionTypes.SIGNIN_FAILURE]: (state, {\n    payload: error\n  }) => ({ ...state,\n    authError: error\n  }),\n  [actionTypes.SIGNUP_SUCCESS]: (state, {\n    payload: user\n  }) => ({ ...state,\n    auth: {\n      type: 'SIGNUP',\n      user\n    },\n    authError: null\n  }),\n  [actionTypes.SIGNUP_FAILURE]: (state, {\n    payload: error\n  }) => ({ ...state,\n    authError: error\n  }),\n  [actionTypes.SIGNOUT_SUCCESS]: state => ({ ...state,\n    auth: null,\n    authError: null\n  }),\n  [actionTypes.SIGNOUT_FAILURE]: (state, {\n    payload: error\n  }) => ({ ...state,\n    authError: error\n  })\n}, initialState);\nexport default auth;","map":{"version":3,"sources":["/home/chaseungbin/swpp2021-team12/frontend/src/store/reducers/auth/auth.js"],"names":["handleActions","takeLatest","actionTypes","createRequestSaga","authAPI","signinSaga","SIGNIN","signin","signupSaga","SIGNUP","signup","signoutSaga","SIGNOUT","signout","authSaga","initialState","auth","authError","SIGNIN_SUCCESS","state","payload","user","type","SIGNIN_FAILURE","error","SIGNUP_SUCCESS","SIGNUP_FAILURE","SIGNOUT_SUCCESS","SIGNOUT_FAILURE"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAO,KAAKC,WAAZ,MAA6B,2BAA7B;AACA,OAAOC,iBAAP,MAA8B,4CAA9B;AACA,OAAO,KAAKC,OAAZ,MAAyB,uBAAzB;AAEA,MAAMC,UAAU,GAAGF,iBAAiB,CAACD,WAAW,CAACI,MAAb,EAAqBF,OAAO,CAACG,MAA7B,CAApC;AACA,MAAMC,UAAU,GAAGL,iBAAiB,CAACD,WAAW,CAACO,MAAb,EAAqBL,OAAO,CAACM,MAA7B,CAApC;AACA,MAAMC,WAAW,GAAGR,iBAAiB,CAACD,WAAW,CAACU,OAAb,EAAsBR,OAAO,CAACS,OAA9B,CAArC;AACA,OAAO,UAAUC,QAAV,GAAqB;AAC1B,QAAMb,UAAU,CAACC,WAAW,CAACI,MAAb,EAAqBD,UAArB,CAAhB;AACA,QAAMJ,UAAU,CAACC,WAAW,CAACO,MAAb,EAAqBD,UAArB,CAAhB;AACA,QAAMP,UAAU,CAACC,WAAW,CAACU,OAAb,EAAsBD,WAAtB,CAAhB;AACD;AAED,MAAMI,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,SAAS,EAAE;AAFQ,CAArB;AAKA,MAAMD,IAAI,GAAGhB,aAAa,CACxB;AACE,GAACE,WAAW,CAACgB,cAAb,GAA8B,CAACC,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEC;AAAX,GAAR,MAA+B,EAC3D,GAAGF,KADwD;AAE3DF,IAAAA,SAAS,EAAE,IAFgD;AAG3DD,IAAAA,IAAI,EAAE;AAAEM,MAAAA,IAAI,EAAE,QAAR;AAAkBD,MAAAA;AAAlB;AAHqD,GAA/B,CADhC;AAME,GAACnB,WAAW,CAACqB,cAAb,GAA8B,CAACJ,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEI;AAAX,GAAR,MAAgC,EAC5D,GAAGL,KADyD;AAE5DF,IAAAA,SAAS,EAAEO;AAFiD,GAAhC,CANhC;AAUE,GAACtB,WAAW,CAACuB,cAAb,GAA8B,CAACN,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEC;AAAX,GAAR,MAA+B,EAC3D,GAAGF,KADwD;AAE3DH,IAAAA,IAAI,EAAE;AAAEM,MAAAA,IAAI,EAAE,QAAR;AAAkBD,MAAAA;AAAlB,KAFqD;AAG3DJ,IAAAA,SAAS,EAAE;AAHgD,GAA/B,CAVhC;AAeE,GAACf,WAAW,CAACwB,cAAb,GAA8B,CAACP,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEI;AAAX,GAAR,MAAgC,EAC5D,GAAGL,KADyD;AAE5DF,IAAAA,SAAS,EAAEO;AAFiD,GAAhC,CAfhC;AAmBE,GAACtB,WAAW,CAACyB,eAAb,GAAgCR,KAAD,KAAY,EACzC,GAAGA,KADsC;AAEzCH,IAAAA,IAAI,EAAE,IAFmC;AAGzCC,IAAAA,SAAS,EAAE;AAH8B,GAAZ,CAnBjC;AAwBE,GAACf,WAAW,CAAC0B,eAAb,GAA+B,CAACT,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEI;AAAX,GAAR,MAAgC,EAC7D,GAAGL,KAD0D;AAE7DF,IAAAA,SAAS,EAAEO;AAFkD,GAAhC;AAxBjC,CADwB,EA8BxBT,YA9BwB,CAA1B;AAiCA,eAAeC,IAAf","sourcesContent":["import { handleActions } from 'redux-actions';\nimport { takeLatest } from 'redux-saga/effects';\nimport * as actionTypes from '../../actions/actionTypes';\nimport createRequestSaga from '../../../components/auth/createRequestSaga';\nimport * as authAPI from '../../../lib/api/auth';\n\nconst signinSaga = createRequestSaga(actionTypes.SIGNIN, authAPI.signin);\nconst signupSaga = createRequestSaga(actionTypes.SIGNUP, authAPI.signup);\nconst signoutSaga = createRequestSaga(actionTypes.SIGNOUT, authAPI.signout);\nexport function* authSaga() {\n  yield takeLatest(actionTypes.SIGNIN, signinSaga);\n  yield takeLatest(actionTypes.SIGNUP, signupSaga);\n  yield takeLatest(actionTypes.SIGNOUT, signoutSaga);\n}\n\nconst initialState = {\n  auth: null,\n  authError: null,\n};\n\nconst auth = handleActions(\n  {\n    [actionTypes.SIGNIN_SUCCESS]: (state, { payload: user }) => ({\n      ...state,\n      authError: null,\n      auth: { type: 'SIGNIN', user },\n    }),\n    [actionTypes.SIGNIN_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error,\n    }),\n    [actionTypes.SIGNUP_SUCCESS]: (state, { payload: user }) => ({\n      ...state,\n      auth: { type: 'SIGNUP', user },\n      authError: null,\n    }),\n    [actionTypes.SIGNUP_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error,\n    }),\n    [actionTypes.SIGNOUT_SUCCESS]: (state) => ({\n      ...state,\n      auth: null,\n      authError: null,\n    }),\n    [actionTypes.SIGNOUT_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error,\n    }),\n  },\n  initialState,\n);\n\nexport default auth;\n"]},"metadata":{},"sourceType":"module"}