{"ast":null,"code":"import { put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { startLoading, finishLoading } from '../../store/actions/loading';\nimport * as actionTypes from '../../store/actions/actionTypes';\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\nexport default function createRequestSaga(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`; // eslint-disable-next-line func-names\n\n  return function* (action) {\n    let err = null;\n    let response = null;\n    yield put(startLoading(type));\n\n    switch (type) {\n      case actionTypes.SIGNIN:\n        yield axios.post(request, {\n          email: action.payload.email,\n          password: action.payload.password\n        }).then(res => {\n          response = res.data;\n        }).catch(error => {\n          err = error;\n        });\n\n        if (!err) {\n          yield put({\n            type: SUCCESS,\n            payload: response\n          });\n        } else {\n          yield put({\n            type: FAILURE,\n            payload: {\n              error: err\n            }\n          });\n        }\n\n        break;\n\n      case actionTypes.SIGNUP:\n        yield axios.post(request, {\n          email: action.payload.email,\n          name: action.payload.name,\n          password: action.payload.password\n        }).then(res => {\n          response = res.data;\n        }).catch(error => {\n          err = error;\n        });\n\n        if (!err) {\n          yield put({\n            type: SUCCESS,\n            payload: response\n          });\n        } else {\n          yield put({\n            type: FAILURE,\n            payload: err\n          });\n        }\n\n        break;\n\n      case actionTypes.SIGNOUT:\n        yield axios.get(request).catch(error => {\n          err = error;\n        });\n\n        if (!err) {\n          yield put({\n            type: SUCCESS\n          });\n        } else {\n          yield put({\n            type: FAILURE,\n            payload: err\n          });\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    yield put(finishLoading(type));\n  };\n}","map":{"version":3,"sources":["/home/chaseungbin/swpp2021-team12/frontend/src/components/auth/createRequestSaga.js"],"names":["put","axios","startLoading","finishLoading","actionTypes","defaults","xsrfCookieName","xsrfHeaderName","createRequestSaga","type","request","SUCCESS","FAILURE","action","err","response","SIGNIN","post","email","payload","password","then","res","data","catch","error","SIGNUP","name","SIGNOUT","get"],"mappings":"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","sourcesContent":["import { put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { startLoading, finishLoading } from '../../store/actions/loading';\nimport * as actionTypes from '../../store/actions/actionTypes';\n\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nexport default function createRequestSaga(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n\n  // eslint-disable-next-line func-names\n  return function* (action) {\n    let err = null;\n    let response = null;\n    yield put(startLoading(type));\n\n    switch (type) {\n      case actionTypes.SIGNIN:\n        yield axios\n          .post(request, {\n            email: action.payload.email,\n            password: action.payload.password,\n          })\n          .then((res) => {\n            response = res.data;\n          })\n          .catch((error) => {\n            err = error;\n          });\n        if (!err) {\n          yield put({\n            type: SUCCESS,\n            payload: response,\n          });\n        } else {\n          yield put({\n            type: FAILURE,\n            payload: {\n              error: err,\n            },\n          });\n        }\n        break;\n\n      case actionTypes.SIGNUP:\n        yield axios\n          .post(request, {\n            email: action.payload.email,\n            name: action.payload.name,\n            password: action.payload.password,\n          })\n          .then((res) => {\n            response = res.data;\n          })\n          .catch((error) => {\n            err = error;\n          });\n        if (!err) {\n          yield put({\n            type: SUCCESS,\n            payload: response,\n          });\n        } else {\n          yield put({\n            type: FAILURE,\n            payload: err,\n          });\n        }\n        break;\n\n      case actionTypes.SIGNOUT:\n        yield axios.get(request).catch((error) => {\n          err = error;\n        });\n        if (!err) {\n          yield put({ type: SUCCESS });\n        } else {\n          yield put({ type: FAILURE, payload: err });\n        }\n        break;\n\n      default:\n        break;\n    }\n\n    yield put(finishLoading(type));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}